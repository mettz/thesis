const path = require("path");
const { BN } = require("ethereumjs-util");

exports.SOLC_BIN = path.resolve(
  process.cwd(),
  "./solidity/build/release/solc/solc"
);
exports.SOLC_ARGS = [
  "--evm-version",
  "istanbul",
  "--lb",
  "--instrumented",
  "--ir",
  "--ir-optimized",
  "--experimental-via-ir",
  "--asm-costs",
  "--overwrite",
  "--optimize",
  "-o",
];

exports.ARTIFACTS_DIR = path.join(process.cwd(), "build");
exports.TRUFFLE_DIR = path.join(this.ARTIFACTS_DIR, "truffle");
exports.EXAMPLES_DIR = path.join(process.cwd(), "examples");
exports.INSTRUMENTED_DIR = path.join(this.EXAMPLES_DIR, "instrumented");

const gasPrices = {
  memory: new BN(3),
  quadCoeffDiv: new BN(512),
  sstoreSentryGasEIP2200: new BN(2300),
  sstoreNoopGasEIP2200: new BN(800),
  sstoreInitGasEIP2200: new BN(20000),
  sstoreClearRefundEIP2200: new BN(15000),
  sstoreCleanGasEIP2200: new BN(5000),
  sstoreClearRefundEIP2200: new BN(15000),
  sstoreClearRefundEIP2200: new BN(15000),
  sstoreInitRefundEIP2200: new BN(19200),
  sstoreCleanRefundEIP2200: new BN(4200),
  sstoreDirtyGasEIP2200: new BN(800),
  callValueTransfer: new BN(9000),
  callNewAccount: new BN(25000),
  expByte: new BN(50),
  sha3Word: new BN(6),
  copy: new BN(3),
  logTopic: new BN(375),
  logData: new BN(8),
};

exports.gasPrices = gasPrices;
exports.GAS_FORMULAE = {
  STOP: 0,
  ADD: 3,
  MUL: 5,
  SUB: 3,
  DIV: 5,
  SDIV: 5,
  MOD: 5,
  SMOD: 5,
  ADDMOD: 8,
  MULMOD: 8,
  SIGNEXTEND: 5,
  LT: 3,
  GT: 3,
  SLT: 3,
  SGT: 3,
  EQ: 3,
  ISZERO: 3,
  AND: 3,
  OR: 3,
  XOR: 3,
  NOT: 3,
  BYTE: 3,
  SHL: 3,
  SHR: 3,
  SAR: 3,
  ADDRESS: 2,
  BALANCE: 700,
  ORIGIN: 2,
  CALLER: 2,
  CALLVALUE: 2,
  CALLDATALOAD: 3,
  CALLDATASIZE: 2,
  CODESIZE: 2,
  GASPRICE: 2,
  EXTCODESIZE: 700,
  RETURNDATASIZE: 2,
  EXTCODEHASH: 700,
  BLOCKHASH: 20,
  COINBASE: 2,
  TIMESTAMP: 2,
  NUMBER: 2,
  DIFFICULTY: 2,
  GASLIMIT: 2,
  CHAINID: 2,
  SELFBALANCE: 5,
  POP: 2,
  SLOAD: 800,
  JUMP: 8,
  JUMPI: 10,
  PC: 2,
  MSIZE: 2,
  GAS: 2,
  JUMPDEST: 1,
  PUSH: 3,
  PUSH1: 3,
  PUSH2: 3,
  PUSH3: 3,
  PUSH4: 3,
  PUSH5: 3,
  PUSH6: 3,
  PUSH7: 3,
  PUSH8: 3,
  PUSH9: 3,
  PUSH10: 3,
  PUSH11: 3,
  PUSH12: 3,
  PUSH13: 3,
  PUSH14: 3,
  PUSH15: 3,
  PUSH16: 3,
  PUSH17: 3,
  PUSH18: 3,
  PUSH19: 3,
  PUSH20: 3,
  PUSH21: 3,
  PUSH22: 3,
  PUSH23: 3,
  PUSH24: 3,
  PUSH25: 3,
  PUSH26: 3,
  PUSH27: 3,
  PUSH28: 3,
  PUSH29: 3,
  PUSH30: 3,
  PUSH31: 3,
  PUSH32: 3,
  DUP: 3,
  DUP1: 3,
  DUP2: 3,
  DUP3: 3,
  DUP4: 3,
  DUP5: 3,
  DUP6: 3,
  DUP7: 3,
  DUP8: 3,
  DUP9: 3,
  DUP10: 3,
  DUP11: 3,
  DUP12: 3,
  DUP13: 3,
  DUP14: 3,
  DUP15: 3,
  DUP16: 3,
  SWAP: 3,
  SWAP1: 3,
  SWAP2: 3,
  SWAP3: 3,
  SWAP4: 3,
  SWAP5: 3,
  SWAP6: 3,
  SWAP7: 3,
  SWAP8: 3,
  SWAP9: 3,
  SWAP10: 3,
  SWAP11: 3,
  SWAP12: 3,
  SWAP13: 3,
  SWAP14: 3,
  SWAP15: 3,
  SWAP16: 3,
  EXP: (exponent) => [
    10,
    exponent === "0" ? 0 : `${exponent}.byteLength() * ${gasPrices.expByte}`,
  ],
  KECCAK256: (pointer, length) => [
    30,
    `memaccess(${pointer}, ${length})`,
    `${gasPrices.sha3Word} * sizeof(${length})`,
  ],
  CALLDATACOPY: (memOffset, dataLength) => [
    3,
    `memaccess(${memOffset}, ${dataLength})`,
    `${gasPrices.copy} * sizeof(${dataLength})`,
  ],
  CODECOPY: (memOffset, _, dataLength) => [
    3,
    `memaccess(${memOffset}, ${dataLength})`,
    `${gasPrices.copy} * sizeof(${dataLength})`,
  ],
  EXTCODECOPY: (memOffset, _, dataLength) => [
    700,
    `memaccess(${memOffset}, ${dataLength})`,
    `${gasPrices.copy} * sizeof(${dataLength})`,
  ],
  RETURNDATACOPY: (memOffset, _, dataLength) => [
    3,
    `memaccess(${memOffset}, ${dataLength})`,
    `${gasPrices.copy} * sizeof(${dataLength})`,
  ],
  MLOAD: (pointer) => [3, `memaccess(${pointer}, 32)`],
  MSTORE: (pointer, variable) => [
    3,
    `memaccess(${pointer}, sizeof(${variable}))`,
  ],
  MSTORE8: (pointer, variable) => [
    3,
    `memaccess(${pointer}, sizeof(${variable}))`,
  ],
  SSTORE: (slot, value) => `sstore(${slot}, ${value})`,
  LOG0: (memOffset, memLength) => [
    375,
    `memaccess(${memOffset}, ${memLength})`,
    `${memLength} * ${gasPrices.logData})`,
  ],
  LOG1: (memOffset, memLength) => [
    375,
    `memaccess(${memOffset}, ${memLength})`,
    `${gasPrices.logTopic} * 1 + ${memLength} * ${gasPrices.logData})`,
  ],
  LOG2: (memOffset, memLength) => [
    375,
    `memaccess(${memOffset}, ${memLength})`,
    `${gasPrices.logTopic} * 2 + ${memLength} * ${gasPrices.logData})`,
  ],
  LOG3: (memOffset, memLength) => [
    375,
    `memaccess(${memOffset}, ${memLength})`,
    `${gasPrices.logTopic} * 3 + ${memLength} * ${gasPrices.logData})`,
  ],
  LOG4: (memOffset, memLength) => [
    375,
    `memaccess(${memOffset}, ${memLength})`,
    `${gasPrices.logTopic} * 4 + ${memLength} * ${gasPrices.logData})`,
  ],
  CREATE: (pointer, length) => [32000, `memaccess(${pointer}, ${length})`],
  CREATE2: (pointer, length) => [
    32000,
    `memaccess(${pointer}, ${length})`,
    `${gasPrices.sha3Word} * sizeof(${length})`,
  ],
  CALL: (inOffset, inLength, outOffset, outLength, value, toAddr) => [
    700,
    `memaccess(${inOffset}, ${inLength})`,
    `memaccess(${outOffset}, ${outLength})`,
    value === "0" ? 0 : `${gasPrices.callValueTransfer}`,
    value === "0"
      ? 0
      : `(exists(${toAddr}) ? ${gasPrices.callValueTransfer} : 0)`,
  ],
  CALLCODE: (inOffset, inLength, outOffset, outLength, value) => [
    700,
    `memaccess(${inOffset}, ${inLength})`,
    `memaccess(${outOffset}, ${outLength})`,
    value === "0" ? 0 : `${gasPrices.callValueTransfer}`,
  ],
  DELEGATECALL: (inOffset, inLength, outOffset, outLength) => [
    700,
    `memaccess(${inOffset}, ${inLength})`,
    `memaccess(${outOffset}, ${outLength})`,
  ],
  STATICCALL: (inOffset, inLength, outOffset, outLength) => [
    700,
    `memaccess(${inOffset}, ${inLength})`,
    `memaccess(${outOffset}, ${outLength})`,
  ],
  RETURN: (pointer, size) => `memaccess(${pointer}, ${size})`,
  REVERT: (pointer, size) => `memaccess(${pointer}, ${size})`,
  SELFDESTRUCT: (account) => [
    5000,
    `(exists(${account}) ? ${gasPrices.callNewAccount} : 0)`,
  ],
};
