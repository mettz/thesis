    /* "examples/New.sol":166:534  contract C {... */
  mstore(0x40, 0x80)
    /* "examples/New.sol":195:196  4 */
  0x04
    /* "examples/New.sol":189:197  new D(4) */
  mload(0x40)
  tag_1
  swap1
  tag_2
  jump	// in
tag_1:
    /* "#utility.yul":168:193   */
  swap1
  dup2
  mstore
    /* "#utility.yul":156:158   */
  0x20
    /* "#utility.yul":141:159   */
  add
    /* "examples/New.sol":189:197  new D(4) */
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  0x00
  create
  dup1
  iszero
  dup1
  iszero
  tag_5
  jumpi
  returndatasize
  0x00
  dup1
  returndatacopy
  revert(0x00, returndatasize)
tag_5:
  pop
    /* "examples/New.sol":183:197  D d = new D(4) */
  0x00
  dup1
  sload
  not(sub(shl(0xa0, 0x01), 0x01))
  and
  sub(shl(0xa0, 0x01), 0x01)
  swap3
  swap1
  swap3
  and
  swap2
  swap1
  swap2
  or
  swap1
  sstore
    /* "examples/New.sol":166:534  contract C {... */
  callvalue
  dup1
  iszero
  tag_6
  jumpi
  0x00
  dup1
  revert
tag_6:
  pop
  jump(tag_8)
tag_2:
  dataSize(sub_1)
  dup1
  dataOffset(sub_1)
  dup4
  codecopy
  add
  swap1
  jump	// out
    /* "#utility.yul":123:199   */
tag_8:
    /* "examples/New.sol":166:534  contract C {... */
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "examples/New.sol":166:534  contract C {... */
      mstore(0x40, 0x80)
      jumpi(tag_1, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x8dcd64cc
      eq
      tag_2
      jumpi
      dup1
      0x95fe0e65
      eq
      tag_3
      jumpi
    tag_1:
      0x00
      dup1
      revert
        /* "examples/New.sol":348:532  function createAndEndowD(uint256 arg, uint256 amount) public payable {... */
    tag_2:
      tag_4
      tag_5
      calldatasize
      0x04
      tag_6
      jump	// in
    tag_5:
      tag_7
      jump	// in
    tag_4:
      stop
        /* "examples/New.sol":251:342  function createD(uint256 arg) public {... */
    tag_3:
      callvalue
      dup1
      iszero
      tag_8
      jumpi
      0x00
      dup1
      revert
    tag_8:
      pop
      tag_4
      tag_10
      calldatasize
      0x04
      tag_11
      jump	// in
    tag_10:
      tag_12
      jump	// in
        /* "examples/New.sol":348:532  function createAndEndowD(uint256 arg, uint256 amount) public payable {... */
    tag_7:
        /* "examples/New.sol":473:479  D newD */
      0x00
        /* "examples/New.sol":495:501  amount */
      dup2
        /* "examples/New.sol":503:506  arg */
      dup4
        /* "examples/New.sol":482:507  new D{value: amount}(arg) */
      mload(0x40)
      tag_14
      swap1
      tag_15
      jump	// in
    tag_14:
        /* "#utility.yul":817:842   */
      swap1
      dup2
      mstore
        /* "#utility.yul":805:807   */
      0x20
        /* "#utility.yul":790:808   */
      add
        /* "examples/New.sol":482:507  new D{value: amount}(arg) */
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      dup3
      create
      swap1
      pop
      dup1
      iszero
      dup1
      iszero
      tag_18
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_18:
      pop
        /* "examples/New.sol":473:507  D newD = new D{value: amount}(arg) */
      swap1
      pop
        /* "examples/New.sol":517:521  newD */
      dup1
      sub(shl(0xa0, 0x01), 0x01)
        /* "examples/New.sol":517:523  newD.x */
      and
      0x0c55699c
        /* "examples/New.sol":517:525  newD.x() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_19
      jumpi
      0x00
      dup1
      revert
    tag_19:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_21
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_21:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      not(0x1f)
      0x1f
      dup3
      add
      and
      dup3
      add
      dup1
      0x40
      mstore
      pop
      dup2
      add
      swap1
      tag_22
      swap2
      swap1
      tag_23
      jump	// in
    tag_22:
      pop
        /* "examples/New.sol":348:532  function createAndEndowD(uint256 arg, uint256 amount) public payable {... */
      pop
      pop
      pop
      jump	// out
        /* "examples/New.sol":251:342  function createD(uint256 arg) public {... */
    tag_12:
        /* "examples/New.sol":298:304  D newD */
      0x00
        /* "examples/New.sol":313:316  arg */
      dup2
        /* "examples/New.sol":307:317  new D(arg) */
      mload(0x40)
      tag_25
      swap1
      tag_15
      jump	// in
    tag_25:
        /* "#utility.yul":817:842   */
      swap1
      dup2
      mstore
        /* "#utility.yul":805:807   */
      0x20
        /* "#utility.yul":790:808   */
      add
        /* "examples/New.sol":307:317  new D(arg) */
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      0x00
      create
      dup1
      iszero
      dup1
      iszero
      tag_27
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_27:
      pop
        /* "examples/New.sol":298:317  D newD = new D(arg) */
      swap1
      pop
        /* "examples/New.sol":327:331  newD */
      dup1
      sub(shl(0xa0, 0x01), 0x01)
        /* "examples/New.sol":327:333  newD.x */
      and
      0x0c55699c
        /* "examples/New.sol":327:335  newD.x() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_28
      jumpi
      0x00
      dup1
      revert
    tag_28:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_30
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_30:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      not(0x1f)
      0x1f
      dup3
      add
      and
      dup3
      add
      dup1
      0x40
      mstore
      pop
      dup2
      add
      swap1
      tag_31
      swap2
      swap1
      tag_23
      jump	// in
    tag_31:
      pop
        /* "examples/New.sol":251:342  function createD(uint256 arg) public {... */
      pop
      pop
      jump	// out
    tag_15:
      dataSize(sub_0)
      dup1
      dataOffset(sub_0)
      dup4
      codecopy
      add
      swap1
      jump	// out
        /* "#utility.yul":14:204   */
    tag_11:
      0x00
        /* "#utility.yul":126:128   */
      0x20
        /* "#utility.yul":114:123   */
      dup3
        /* "#utility.yul":105:112   */
      dup5
        /* "#utility.yul":101:124   */
      sub
        /* "#utility.yul":97:129   */
      slt
        /* "#utility.yul":94:96   */
      iszero
      tag_34
      jumpi
        /* "#utility.yul":147:153   */
      dup1
        /* "#utility.yul":139:145   */
      dup2
        /* "#utility.yul":132:154   */
      revert
        /* "#utility.yul":94:96   */
    tag_34:
      pop
        /* "#utility.yul":175:198   */
      calldataload
      swap2
        /* "#utility.yul":84:204   */
      swap1
      pop
      jump	// out
        /* "#utility.yul":209:403   */
    tag_23:
      0x00
        /* "#utility.yul":332:334   */
      0x20
        /* "#utility.yul":320:329   */
      dup3
        /* "#utility.yul":311:318   */
      dup5
        /* "#utility.yul":307:330   */
      sub
        /* "#utility.yul":303:335   */
      slt
        /* "#utility.yul":300:302   */
      iszero
      tag_36
      jumpi
        /* "#utility.yul":353:359   */
      dup1
        /* "#utility.yul":345:351   */
      dup2
        /* "#utility.yul":338:360   */
      revert
        /* "#utility.yul":300:302   */
    tag_36:
      pop
        /* "#utility.yul":381:397   */
      mload
      swap2
        /* "#utility.yul":290:403   */
      swap1
      pop
      jump	// out
        /* "#utility.yul":408:666   */
    tag_6:
      0x00
      dup1
        /* "#utility.yul":537:539   */
      0x40
        /* "#utility.yul":525:534   */
      dup4
        /* "#utility.yul":516:523   */
      dup6
        /* "#utility.yul":512:535   */
      sub
        /* "#utility.yul":508:540   */
      slt
        /* "#utility.yul":505:507   */
      iszero
      tag_38
      jumpi
        /* "#utility.yul":558:564   */
      dup1
        /* "#utility.yul":550:556   */
      dup2
        /* "#utility.yul":543:565   */
      revert
        /* "#utility.yul":505:507   */
    tag_38:
      pop
      pop
        /* "#utility.yul":586:609   */
      dup1
      calldataload
      swap3
        /* "#utility.yul":656:658   */
      0x20
        /* "#utility.yul":641:659   */
      swap1
      swap2
      add
        /* "#utility.yul":628:660   */
      calldataload
      swap2
      pop
        /* "#utility.yul":495:666   */
      jump	// out
    stop

    sub_0: assembly {
            /* "examples/New.sol":69:164  contract D {... */
          mstore(0x40, 0x80)
            /* "examples/New.sol":109:162  constructor(uint256 a) payable {... */
          mload(0x40)
          sub(codesize, bytecodeSize)
          dup1
          bytecodeSize
          dup4
          codecopy
          dup2
          add
          0x40
          dup2
          swap1
          mstore
          tag_1
          swap2
          tag_2
          jump	// in
        tag_1:
            /* "examples/New.sol":150:151  x */
          0x00
            /* "examples/New.sol":150:155  x = a */
          sstore
            /* "examples/New.sol":69:164  contract D {... */
          jump(tag_6)
            /* "#utility.yul":14:208   */
        tag_2:
          0x00
            /* "#utility.yul":137:139   */
          0x20
            /* "#utility.yul":125:134   */
          dup3
            /* "#utility.yul":116:123   */
          dup5
            /* "#utility.yul":112:135   */
          sub
            /* "#utility.yul":108:140   */
          slt
            /* "#utility.yul":105:107   */
          iszero
          tag_8
          jumpi
            /* "#utility.yul":158:164   */
          dup1
            /* "#utility.yul":150:156   */
          dup2
            /* "#utility.yul":143:165   */
          revert
            /* "#utility.yul":105:107   */
        tag_8:
          pop
            /* "#utility.yul":186:202   */
          mload
          swap2
            /* "#utility.yul":95:208   */
          swap1
          pop
          jump	// out
        tag_6:
            /* "examples/New.sol":69:164  contract D {... */
          dataSize(sub_0)
          dup1
          dataOffset(sub_0)
          0x00
          codecopy
          0x00
          return
        stop

        sub_0: assembly {
                /* "examples/New.sol":69:164  contract D {... */
              mstore(0x40, 0x80)
              callvalue
              dup1
              iszero
              tag_1
              jumpi
              0x00
              dup1
              revert
            tag_1:
              pop
              jumpi(tag_2, lt(calldatasize, 0x04))
              shr(0xe0, calldataload(0x00))
              dup1
              0x0c55699c
              eq
              tag_3
              jumpi
            tag_2:
              0x00
              dup1
              revert
                /* "examples/New.sol":86:102  uint256 public x */
            tag_3:
              tag_4
              sload(0x00)
              dup2
              jump
            tag_4:
              mload(0x40)
                /* "#utility.yul":160:185   */
              swap1
              dup2
              mstore
                /* "#utility.yul":148:150   */
              0x20
                /* "#utility.yul":133:151   */
              add
                /* "examples/New.sol":86:102  uint256 public x */
              mload(0x40)
              dup1
              swap2
              sub
              swap1
              return

            auxdata: 0xa264697066735822122017ba27acde05e047c73676f4fca47438eae3643de038a129d192bce971ed51c664736f6c63430008030033
        }
    }

    auxdata: 0xa2646970667358221220249ae64d201c490ec81c68c5731b9971361b1ad6012d149ac61e66f08f644c3864736f6c63430008030033
}

sub_1: assembly {
        /* "examples/New.sol":69:164  contract D {... */
      mstore(0x40, 0x80)
        /* "examples/New.sol":109:162  constructor(uint256 a) payable {... */
      mload(0x40)
      sub(codesize, bytecodeSize)
      dup1
      bytecodeSize
      dup4
      codecopy
      dup2
      add
      0x40
      dup2
      swap1
      mstore
      tag_1
      swap2
      tag_2
      jump	// in
    tag_1:
        /* "examples/New.sol":150:151  x */
      0x00
        /* "examples/New.sol":150:155  x = a */
      sstore
        /* "examples/New.sol":69:164  contract D {... */
      jump(tag_6)
        /* "#utility.yul":14:208   */
    tag_2:
      0x00
        /* "#utility.yul":137:139   */
      0x20
        /* "#utility.yul":125:134   */
      dup3
        /* "#utility.yul":116:123   */
      dup5
        /* "#utility.yul":112:135   */
      sub
        /* "#utility.yul":108:140   */
      slt
        /* "#utility.yul":105:107   */
      iszero
      tag_8
      jumpi
        /* "#utility.yul":158:164   */
      dup1
        /* "#utility.yul":150:156   */
      dup2
        /* "#utility.yul":143:165   */
      revert
        /* "#utility.yul":105:107   */
    tag_8:
      pop
        /* "#utility.yul":186:202   */
      mload
      swap2
        /* "#utility.yul":95:208   */
      swap1
      pop
      jump	// out
    tag_6:
        /* "examples/New.sol":69:164  contract D {... */
      dataSize(sub_0)
      dup1
      dataOffset(sub_0)
      0x00
      codecopy
      0x00
      return
    stop

    sub_0: assembly {
            /* "examples/New.sol":69:164  contract D {... */
          mstore(0x40, 0x80)
          callvalue
          dup1
          iszero
          tag_1
          jumpi
          0x00
          dup1
          revert
        tag_1:
          pop
          jumpi(tag_2, lt(calldatasize, 0x04))
          shr(0xe0, calldataload(0x00))
          dup1
          0x0c55699c
          eq
          tag_3
          jumpi
        tag_2:
          0x00
          dup1
          revert
            /* "examples/New.sol":86:102  uint256 public x */
        tag_3:
          tag_4
          sload(0x00)
          dup2
          jump
        tag_4:
          mload(0x40)
            /* "#utility.yul":160:185   */
          swap1
          dup2
          mstore
            /* "#utility.yul":148:150   */
          0x20
            /* "#utility.yul":133:151   */
          add
            /* "examples/New.sol":86:102  uint256 public x */
          mload(0x40)
          dup1
          swap2
          sub
          swap1
          return

        auxdata: 0xa264697066735822122017ba27acde05e047c73676f4fca47438eae3643de038a129d192bce971ed51c664736f6c63430008030033
    }
}
