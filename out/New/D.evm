    /* "examples/New.sol":69:164  contract D {... */
  mstore(0x40, 0x80)
    /* "examples/New.sol":109:162  constructor(uint256 a) payable {... */
  mload(0x40)
  sub(codesize, bytecodeSize)
  dup1
  bytecodeSize
  dup4
  codecopy
  dup2
  add
  0x40
  dup2
  swap1
  mstore
  tag_1
  swap2
  tag_2
  jump	// in
tag_1:
    /* "examples/New.sol":150:151  x */
  0x00
    /* "examples/New.sol":150:155  x = a */
  sstore
    /* "examples/New.sol":69:164  contract D {... */
  jump(tag_6)
    /* "#utility.yul":14:208   */
tag_2:
  0x00
    /* "#utility.yul":137:139   */
  0x20
    /* "#utility.yul":125:134   */
  dup3
    /* "#utility.yul":116:123   */
  dup5
    /* "#utility.yul":112:135   */
  sub
    /* "#utility.yul":108:140   */
  slt
    /* "#utility.yul":105:107   */
  iszero
  tag_8
  jumpi
    /* "#utility.yul":158:164   */
  dup1
    /* "#utility.yul":150:156   */
  dup2
    /* "#utility.yul":143:165   */
  revert
    /* "#utility.yul":105:107   */
tag_8:
  pop
    /* "#utility.yul":186:202   */
  mload
  swap2
    /* "#utility.yul":95:208   */
  swap1
  pop
  jump	// out
tag_6:
    /* "examples/New.sol":69:164  contract D {... */
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "examples/New.sol":69:164  contract D {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x0c55699c
      eq
      tag_3
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "examples/New.sol":86:102  uint256 public x */
    tag_3:
      tag_4
      sload(0x00)
      dup2
      jump
    tag_4:
      mload(0x40)
        /* "#utility.yul":160:185   */
      swap1
      dup2
      mstore
        /* "#utility.yul":148:150   */
      0x20
        /* "#utility.yul":133:151   */
      add
        /* "examples/New.sol":86:102  uint256 public x */
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return

    auxdata: 0xa264697066735822122017ba27acde05e047c73676f4fca47438eae3643de038a129d192bce971ed51c664736f6c63430008030033
}
