    /* "examples/ReceiveAndFallback.sol":1038:2742  contract Caller {... */
  mstore(0x40, 0x80)
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "examples/ReceiveAndFallback.sol":1038:2742  contract Caller {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x32eb12f1
      eq
      tag_3
      jumpi
      dup1
      0x979709e5
      eq
      tag_4
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "examples/ReceiveAndFallback.sol":1060:1761  function callTest(Test test) public returns (bool) {... */
    tag_3:
      tag_5
      tag_6
      calldatasize
      0x04
      tag_13
      jump	// in
    tag_6:
      tag_8
      jump	// in
    tag_5:
      mload(0x40)
        /* "#utility.yul":1379:1393   */
      swap1
      iszero
        /* "#utility.yul":1372:1394   */
      iszero
        /* "#utility.yul":1354:1395   */
      dup2
      mstore
        /* "#utility.yul":1342:1344   */
      0x20
        /* "#utility.yul":1327:1345   */
      add
        /* "examples/ReceiveAndFallback.sol":1060:1761  function callTest(Test test) public returns (bool) {... */
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "examples/ReceiveAndFallback.sol":1767:2740  function callTestPayable(TestPayable test) public returns (bool) {... */
    tag_4:
      tag_5
      tag_12
      calldatasize
      0x04
      tag_13
      jump	// in
    tag_12:
      tag_14
      jump	// in
        /* "examples/ReceiveAndFallback.sol":1060:1761  function callTest(Test test) public returns (bool) {... */
    tag_8:
        /* "examples/ReceiveAndFallback.sol":1105:1109  bool */
      0x00
        /* "examples/ReceiveAndFallback.sol":1121:1122  ( */
      /* emit __cost3 */
        /* "examples/ReceiveAndFallback.sol":1172:1220  abi.encodeWithSignature("nonExistingFunction()") */
      0x40
      dup1
      mload
      0x04
      dup2
      mstore
      0x24
      dup2
      add
      dup3
      mstore
      0x20
      dup2
      add
      dup1
      mload
      sub(shl(0xe0, 0x01), 0x01)
      and
      shl(0xe0, 0xf85396d7)
      or
      swap1
      mstore
        /* "examples/ReceiveAndFallback.sol":1140:1230  address(test).call(... */
      swap1
      mload
        /* "examples/ReceiveAndFallback.sol":1122:1134  bool success */
      0x00
      swap2
      sub(shl(0xa0, 0x01), 0x01)
        /* "examples/ReceiveAndFallback.sol":1140:1158  address(test).call */
      dup6
      and
      swap2
        /* "examples/ReceiveAndFallback.sol":1140:1230  address(test).call(... */
      tag_17
      swap2
        /* "examples/ReceiveAndFallback.sol":1172:1220  abi.encodeWithSignature("nonExistingFunction()") */
      swap1
        /* "examples/ReceiveAndFallback.sol":1140:1230  address(test).call(... */
      tag_18
      jump	// in
    tag_17:
      0x00
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      0x00
      dup7
      gas
      call
      swap2
      pop
      pop
      returndatasize
      dup1
      0x00
      dup2
      eq
      tag_21
      jumpi
      mload(0x40)
      swap2
      pop
      and(add(returndatasize, 0x3f), not(0x1f))
      dup3
      add
      0x40
      mstore
      returndatasize
      dup3
      mstore
      returndatasize
      0x00
      0x20
      dup5
      add
      returndatacopy
      jump(tag_20)
    tag_21:
      0x60
      swap2
      pop
    tag_20:
      pop
        /* "examples/ReceiveAndFallback.sol":1121:1230  (bool success, ) = address(test).call(... */
      pop
      swap1
      pop
        /* "examples/ReceiveAndFallback.sol":1248:1255  success */
      dup1
        /* "examples/ReceiveAndFallback.sol":1240:1256  require(success) */
      tag_22
      jumpi
      0x00
      dup1
      revert
    tag_22:
        /* "examples/ReceiveAndFallback.sol":1729:1754  testPayable.send(2 ether) */
      mload(0x40)
        /* "examples/ReceiveAndFallback.sol":1588:1592  test */
      dup4
      swap1
      sub(shl(0xa0, 0x01), 0x01)
        /* "examples/ReceiveAndFallback.sol":1729:1745  testPayable.send */
      dup3
      and
      swap1
        /* "examples/ReceiveAndFallback.sol":1542:1569  address payable testPayable */
      0x00
      swap1
        /* "examples/ReceiveAndFallback.sol":1746:1753  2 ether */
      0x1bc16d674ec80000
      swap1
        /* "examples/ReceiveAndFallback.sol":1542:1569  address payable testPayable */
      dup3
        /* "examples/ReceiveAndFallback.sol":1729:1754  testPayable.send(2 ether) */
      dup2
        /* "examples/ReceiveAndFallback.sol":1542:1569  address payable testPayable */
      dup2
        /* "examples/ReceiveAndFallback.sol":1729:1754  testPayable.send(2 ether) */
      dup2
        /* "examples/ReceiveAndFallback.sol":1746:1753  2 ether */
      dup6
        /* "examples/ReceiveAndFallback.sol":1729:1745  testPayable.send */
      dup9
        /* "examples/ReceiveAndFallback.sol":1542:1569  address payable testPayable */
      dup4
        /* "examples/ReceiveAndFallback.sol":1729:1754  testPayable.send(2 ether) */
      call
      swap9
        /* "examples/ReceiveAndFallback.sol":1060:1761  function callTest(Test test) public returns (bool) {... */
      swap8
      pop
      pop
      pop
      pop
      pop
      pop
      pop
      pop
      jump	// out
        /* "examples/ReceiveAndFallback.sol":1767:2740  function callTestPayable(TestPayable test) public returns (bool) {... */
    tag_14:
        /* "examples/ReceiveAndFallback.sol":1826:1830  bool */
      0x00
        /* "examples/ReceiveAndFallback.sol":1842:1843  ( */
      /* emit __cost4 */
        /* "examples/ReceiveAndFallback.sol":1893:1941  abi.encodeWithSignature("nonExistingFunction()") */
      0x40
      dup1
      mload
      0x04
      dup2
      mstore
      0x24
      dup2
      add
      dup3
      mstore
      0x20
      dup2
      add
      dup1
      mload
      sub(shl(0xe0, 0x01), 0x01)
      and
      shl(0xe0, 0xf85396d7)
      or
      swap1
      mstore
        /* "examples/ReceiveAndFallback.sol":1861:1951  address(test).call(... */
      swap1
      mload
        /* "examples/ReceiveAndFallback.sol":1843:1855  bool success */
      0x00
      swap2
      sub(shl(0xa0, 0x01), 0x01)
        /* "examples/ReceiveAndFallback.sol":1861:1879  address(test).call */
      dup6
      and
      swap2
        /* "examples/ReceiveAndFallback.sol":1861:1951  address(test).call(... */
      tag_25
      swap2
        /* "examples/ReceiveAndFallback.sol":1893:1941  abi.encodeWithSignature("nonExistingFunction()") */
      swap1
        /* "examples/ReceiveAndFallback.sol":1861:1951  address(test).call(... */
      tag_18
      jump	// in
    tag_25:
      0x00
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      0x00
      dup7
      gas
      call
      swap2
      pop
      pop
      returndatasize
      dup1
      0x00
      dup2
      eq
      tag_28
      jumpi
      mload(0x40)
      swap2
      pop
      and(add(returndatasize, 0x3f), not(0x1f))
      dup3
      add
      0x40
      mstore
      returndatasize
      dup3
      mstore
      returndatasize
      0x00
      0x20
      dup5
      add
      returndatacopy
      jump(tag_27)
    tag_28:
      0x60
      swap2
      pop
    tag_27:
      pop
        /* "examples/ReceiveAndFallback.sol":1842:1951  (bool success, ) = address(test).call(... */
      pop
      swap1
      pop
        /* "examples/ReceiveAndFallback.sol":1969:1976  success */
      dup1
        /* "examples/ReceiveAndFallback.sol":1961:1977  require(success) */
      tag_29
      jumpi
      0x00
      dup1
      revert
    tag_29:
        /* "examples/ReceiveAndFallback.sol":2109:2157  abi.encodeWithSignature("nonExistingFunction()") */
      0x40
      dup1
      mload
      0x04
      dup2
      mstore
      0x24
      dup2
      add
      dup3
      mstore
      0x20
      dup2
      add
      dup1
      mload
      sub(shl(0xe0, 0x01), 0x01)
      and
      shl(0xe0, 0xf85396d7)
      or
      swap1
      mstore
        /* "examples/ReceiveAndFallback.sol":2067:2167  address(test).call{value: 1}(... */
      swap1
      mload
      sub(shl(0xa0, 0x01), 0x01)
        /* "examples/ReceiveAndFallback.sol":2067:2085  address(test).call */
      dup6
      and
      swap2
        /* "examples/ReceiveAndFallback.sol":2093:2094  1 */
      0x01
      swap2
        /* "examples/ReceiveAndFallback.sol":2067:2167  address(test).call{value: 1}(... */
      tag_30
      swap2
        /* "examples/ReceiveAndFallback.sol":2109:2157  abi.encodeWithSignature("nonExistingFunction()") */
      swap1
        /* "examples/ReceiveAndFallback.sol":2067:2167  address(test).call{value: 1}(... */
      tag_18
      jump	// in
    tag_30:
      0x00
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup6
      dup8
      gas
      call
      swap3
      pop
      pop
      pop
      returndatasize
      dup1
      0x00
      dup2
      eq
      tag_33
      jumpi
      mload(0x40)
      swap2
      pop
      and(add(returndatasize, 0x3f), not(0x1f))
      dup3
      add
      0x40
      mstore
      returndatasize
      dup3
      mstore
      returndatasize
      0x00
      0x20
      dup5
      add
      returndatacopy
      jump(tag_32)
    tag_33:
      0x60
      swap2
      pop
    tag_32:
      pop
        /* "examples/ReceiveAndFallback.sol":2053:2167  (success, ) = address(test).call{value: 1}(... */
      pop
      dup1
      swap2
      pop
      pop
        /* "examples/ReceiveAndFallback.sol":2185:2192  success */
      dup1
        /* "examples/ReceiveAndFallback.sol":2177:2193  require(success) */
      tag_34
      jumpi
      0x00
      dup1
      revert
    tag_34:
        /* "examples/ReceiveAndFallback.sol":2575:2613  address(test).call{value: 2 ether}("") */
      mload(0x40)
      sub(shl(0xa0, 0x01), 0x01)
        /* "examples/ReceiveAndFallback.sol":2575:2593  address(test).call */
      dup5
      and
      swap1
        /* "examples/ReceiveAndFallback.sol":2601:2608  2 ether */
      0x1bc16d674ec80000
      swap1
        /* "examples/ReceiveAndFallback.sol":2575:2613  address(test).call{value: 2 ether}("") */
      0x00
      dup2
      dup2
      dup2
        /* "examples/ReceiveAndFallback.sol":2601:2608  2 ether */
      dup6
        /* "examples/ReceiveAndFallback.sol":2575:2593  address(test).call */
      dup8
        /* "examples/ReceiveAndFallback.sol":2575:2613  address(test).call{value: 2 ether}("") */
      gas
      call
      swap3
      pop
      pop
      pop
      returndatasize
      dup1
      0x00
      dup2
      eq
      tag_39
      jumpi
      mload(0x40)
      swap2
      pop
      and(add(returndatasize, 0x3f), not(0x1f))
      dup3
      add
      0x40
      mstore
      returndatasize
      dup3
      mstore
      returndatasize
      0x00
      0x20
      dup5
      add
      returndatacopy
      jump(tag_38)
    tag_39:
      0x60
      swap2
      pop
    tag_38:
      pop
        /* "examples/ReceiveAndFallback.sol":2561:2613  (success, ) = address(test).call{value: 2 ether}("") */
      pop
      dup1
      swap2
      pop
      pop
        /* "examples/ReceiveAndFallback.sol":2631:2638  success */
      dup1
        /* "examples/ReceiveAndFallback.sol":2623:2639  require(success) */
      tag_40
      jumpi
      0x00
      dup1
      revert
    tag_40:
      pop
        /* "examples/ReceiveAndFallback.sol":2729:2733  true */
      0x01
      swap3
        /* "examples/ReceiveAndFallback.sol":1767:2740  function callTestPayable(TestPayable test) public returns (bool) {... */
      swap2
      pop
      pop
      jump	// out
        /* "#utility.yul":14:292   */
    tag_13:
        /* "#utility.yul":91:97   */
      0x00
        /* "#utility.yul":144:146   */
      0x20
        /* "#utility.yul":132:141   */
      dup3
        /* "#utility.yul":123:130   */
      dup5
        /* "#utility.yul":119:142   */
      sub
        /* "#utility.yul":115:147   */
      slt
        /* "#utility.yul":112:114   */
      iszero
      tag_43
      jumpi
        /* "#utility.yul":160:161   */
      0x00
        /* "#utility.yul":157:158   */
      dup1
        /* "#utility.yul":150:162   */
      revert
        /* "#utility.yul":112:114   */
    tag_43:
        /* "#utility.yul":199:208   */
      dup2
        /* "#utility.yul":186:209   */
      calldataload
        /* "#utility.yul":218:262   */
      tag_44
        /* "#utility.yul":256:261   */
      dup2
        /* "#utility.yul":218:262   */
      tag_45
      jump	// in
    tag_44:
        /* "#utility.yul":281:286   */
      swap4
        /* "#utility.yul":102:292   */
      swap3
      pop
      pop
      pop
      jump	// out
        /* "#utility.yul":573:999   */
    tag_18:
        /* "#utility.yul":702:705   */
      0x00
        /* "#utility.yul":740:746   */
      dup3
        /* "#utility.yul":734:747   */
      mload
        /* "#utility.yul":765:766   */
      0x00
        /* "#utility.yul":775:904   */
    tag_50:
        /* "#utility.yul":789:795   */
      dup2
        /* "#utility.yul":786:787   */
      dup2
        /* "#utility.yul":783:796   */
      lt
        /* "#utility.yul":775:904   */
      iszero
      tag_52
      jumpi
        /* "#utility.yul":887:891   */
      0x20
        /* "#utility.yul":871:885   */
      dup2
      dup7
      add
        /* "#utility.yul":867:892   */
      dup2
      add
        /* "#utility.yul":861:893   */
      mload
        /* "#utility.yul":848:859   */
      dup6
      dup4
      add
        /* "#utility.yul":841:894   */
      mstore
        /* "#utility.yul":804:816   */
      add
        /* "#utility.yul":775:904   */
      jump(tag_50)
    tag_52:
        /* "#utility.yul":922:928   */
      dup2
        /* "#utility.yul":919:920   */
      dup2
        /* "#utility.yul":916:929   */
      gt
        /* "#utility.yul":913:915   */
      iszero
      tag_53
      jumpi
        /* "#utility.yul":957:958   */
      0x00
        /* "#utility.yul":948:954   */
      dup3
        /* "#utility.yul":943:946   */
      dup6
        /* "#utility.yul":939:955   */
      add
        /* "#utility.yul":932:959   */
      mstore
        /* "#utility.yul":913:915   */
    tag_53:
      pop
        /* "#utility.yul":977:993   */
      swap2
      swap1
      swap2
      add
      swap3
        /* "#utility.yul":710:999   */
      swap2
      pop
      pop
      jump	// out
        /* "#utility.yul":1406:1550   */
    tag_45:
      sub(shl(0xa0, 0x01), 0x01)
        /* "#utility.yul":1494:1525   */
      dup2
      and
        /* "#utility.yul":1484:1526   */
      dup2
      eq
        /* "#utility.yul":1474:1476   */
      tag_57
      jumpi
        /* "#utility.yul":1540:1541   */
      0x00
        /* "#utility.yul":1537:1538   */
      dup1
        /* "#utility.yul":1530:1542   */
      revert
        /* "#utility.yul":1474:1476   */
    tag_57:
        /* "#utility.yul":1464:1550   */
      pop
      jump	// out

    auxdata: 0xa2646970667358221220c9dc2af55782bb8a93691e759dc0fddd288359acd2c8752dd88b2a4be544cdae64736f6c63782b302e382e352d646576656c6f702e323032312e372e31372b636f6d6d69742e35643037306335622e6d6f64005c
}
