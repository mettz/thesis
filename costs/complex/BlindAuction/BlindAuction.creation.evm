--------------------------------
  LABEL COSTS
--------------------------------
__creation_code.internal = 16
__copy_arguments_for_constructor_104_object_BlindAuction_383_fn2.0fe02e4141c8d7d8f8db.internal = 8
__allocate_memory_fn3.2997cfede45ee4a36973.internal = 0
__finalize_allocation_fn4.a84e6484410e731af947.internal = 26
__abi_decode_tuple_t_uint256t_uint256t_address_payable_fromMemory_fn7.f8c5b9fb91c38df9ae7d.internal = 11
__abi_decode_t_uint256_fromMemory_fn11.b124debf522dc9da0c3a.internal = 2
__abi_decode_t_address_payable_fromMemory_fn16.bac1bf08f26d2d24cae9.internal = 2
__validator_revert_t_address_payable_fn17.db35d43e8bec77dcc6c5.internal = 13
__constructor_BlindAuction_383_fn20.584245782238ac0f6b9a.internal = 16
__update_storage_value_offset_0t_address_payable_to_t_address_payable_fn21.6a0365451892977c8542.internal = 21
__checked_add_t_uint256_fn28.c3a73dc630fe2f39216c.internal = 18
__update_storage_value_offset_0t_uint256_to_t_uint256_fn30.b38ada4d3fc658ad220d.internal = 4
__deploy_code.internal = 11
__allocate_unbounded_fn0.5d031f41d60654945adf.internal = 7
__checked_add_t_uint256_fn28.c3a73dc630fe2f39216c.internal.panic2 = 0
__panic_error_0x11_fn29.9dc40ce4e4ac19f76b51.internal = 11
__validator_revert_t_address_payable_fn17.db35d43e8bec77dcc6c5.internal.failure = 3
__abi_decode_tuple_t_uint256t_uint256t_address_payable_fromMemory_fn7.f8c5b9fb91c38df9ae7d.internal.revert = 0
__revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b_fn8.a1393a339aaed88f34c6.internal = 3
__finalize_allocation_fn4.a84e6484410e731af947.internal.panic = 0
__panic_error_0x41_fn6.b9ce7a8a8c356c8bc837.internal = 11
__revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb_fn1.eca8ae6f92262a669a6b.internal = 3

--------------------------------
  EXECUTION
--------------------------------
/* emit __creation_code.internal.start */ (cost: 16)
1: PUSH 0x80 
2: PUSH 0x40 
3: MSTORE 
4: CALLVALUE 
5: ISZERO 
6: PUSH [tag] 1 
7: JUMPI 
  False Branch
    /* emit __revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb_fn1.eca8ae6f92262a669a6b.internal.start */ (cost: 3)
    8: PUSH 0x00 
    9: PUSH 0x00 
    10: REVERT 
    /* emit __revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb_fn1.eca8ae6f92262a669a6b.internal.end */ 
  True Branch
    11: tag_1: 
    /* emit __copy_arguments_for_constructor_104_object_BlindAuction_383_fn2.0fe02e4141c8d7d8f8db.internal.start */ (cost: 8)
    12: PUSH bytecodeSize 
    13: DUP1 
    14: CODESIZE 
    15: SUB 
    /* emit __allocate_memory_fn3.2997cfede45ee4a36973.internal.start */ (cost: 0)
    /* emit __finalize_allocation_fn4.a84e6484410e731af947.internal.start */ (cost: 26)
    16: PUSH 0x1f 
    17: NOT 
    18: PUSH 0x1f 
    19: DUP3 
    20: ADD 
    21: AND 
    22: PUSH 0x80 
    23: ADD 
    24: PUSH 0x80 
    25: DUP2 
    26: LT 
    27: PUSH 0x01 
    28: PUSH 0x01 
    29: PUSH 0x40 
    30: SHL 
    31: SUB 
    32: DUP3 
    33: GT 
    34: OR 
    35: ISZERO 
    36: PUSH [tag] 2 
    37: JUMPI 
      False Branch
        /* emit __finalize_allocation_fn4.a84e6484410e731af947.internal.panic.start */ (cost: 0)
        /* emit __panic_error_0x41_fn6.b9ce7a8a8c356c8bc837.internal.start */ (cost: 11)
        38: PUSH 0x4e487b71 
        39: PUSH 0xe0 
        40: SHL 
        41: PUSH 0x00 
        42: MSTORE 
        43: PUSH 0x41 
        44: PUSH 0x04 
        45: MSTORE 
        46: PUSH 0x24 
        47: PUSH 0x00 
        48: REVERT 
        /* emit __panic_error_0x41_fn6.b9ce7a8a8c356c8bc837.internal.end */ 
        /* emit __finalize_allocation_fn4.a84e6484410e731af947.internal.panic.end */ 
      True Branch
        49: tag_2: 
        50: DUP1 
        51: PUSH 0x40 
        52: MSTORE 
        53: POP 
        /* emit __finalize_allocation_fn4.a84e6484410e731af947.internal.end */ 
        /* emit __allocate_memory_fn3.2997cfede45ee4a36973.internal.end */ 
        54: DUP1 
        55: DUP3 
        56: PUSH 0x80 
        57: CODECOPY 
        /* emit __abi_decode_tuple_t_uint256t_uint256t_address_payable_fromMemory_fn7.f8c5b9fb91c38df9ae7d.internal.start */ (cost: 11)
        58: PUSH 0x60 
        59: DUP2 
        60: SLT 
        61: ISZERO 
        62: PUSH [tag] 3 
        63: JUMPI 
          False Branch
            /* emit __abi_decode_tuple_t_uint256t_uint256t_address_payable_fromMemory_fn7.f8c5b9fb91c38df9ae7d.internal.revert.start */ (cost: 0)
            /* emit __revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b_fn8.a1393a339aaed88f34c6.internal.start */ (cost: 3)
            64: PUSH 0x00 
            65: PUSH 0x00 
            66: REVERT 
            /* emit __revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b_fn8.a1393a339aaed88f34c6.internal.end */ 
            /* emit __abi_decode_tuple_t_uint256t_uint256t_address_payable_fromMemory_fn7.f8c5b9fb91c38df9ae7d.internal.revert.end */ 
          True Branch
            67: tag_3: 
            68: POP 
            69: POP 
            70: PUSH [tag] 4 
            71: PUSH [tag] 5 
            72: JUMP	// in 
            121: tag_5: 
            /* emit __abi_decode_t_uint256_fromMemory_fn11.b124debf522dc9da0c3a.internal.start */ (cost: 7)
            122: PUSH 0x00 
            123: PUSH 0x80 
            124: MLOAD 
            125: SWAP1 
            126: POP 
            127: tag_12: 
            128: SWAP1 
            129: JUMP	// out 
            /* emit __abi_decode_t_uint256_fromMemory_fn11.b124debf522dc9da0c3a.internal.end */ 
            73: tag_4: 
            /* emit __abi_decode_t_uint256_fromMemory_fn11.b124debf522dc9da0c3a.internal.start */ (cost: 2)
            74: PUSH 0xa0 
            75: MLOAD 
            /* emit __abi_decode_t_uint256_fromMemory_fn11.b124debf522dc9da0c3a.internal.end */ 
            /* emit __abi_decode_t_address_payable_fromMemory_fn16.bac1bf08f26d2d24cae9.internal.start */ (cost: 2)
            76: PUSH 0xc0 
            77: MLOAD 
            /* emit __validator_revert_t_address_payable_fn17.db35d43e8bec77dcc6c5.internal.start */ (cost: 13)
            78: PUSH 0x01 
            79: PUSH 0x01 
            80: PUSH 0xa0 
            81: SHL 
            82: SUB 
            83: DUP2 
            84: AND 
            85: DUP2 
            86: EQ 
            87: ISZERO 
            88: ISZERO 
            89: PUSH [tag] 6 
            90: JUMPI 
              False Branch
                /* emit __validator_revert_t_address_payable_fn17.db35d43e8bec77dcc6c5.internal.failure.start */ (cost: 3)
                91: PUSH 0x00 
                92: PUSH 0x00 
                93: REVERT 
                /* emit __validator_revert_t_address_payable_fn17.db35d43e8bec77dcc6c5.internal.failure.end */ 
              True Branch
                94: tag_6: 
                /* emit __validator_revert_t_address_payable_fn17.db35d43e8bec77dcc6c5.internal.end */ 
                /* emit __abi_decode_t_address_payable_fromMemory_fn16.bac1bf08f26d2d24cae9.internal.end */ 
                /* emit __abi_decode_tuple_t_uint256t_uint256t_address_payable_fromMemory_fn7.f8c5b9fb91c38df9ae7d.internal.end */ 
                /* emit __copy_arguments_for_constructor_104_object_BlindAuction_383_fn2.0fe02e4141c8d7d8f8db.internal.end */ 
                95: PUSH [tag] 7 
                96: DUP2 
                97: DUP4 
                98: DUP6 
                99: PUSH [tag] 8 
                100: JUMP	// in 
                171: tag_8: 
                /* emit __constructor_BlindAuction_383_fn20.584245782238ac0f6b9a.internal.start */ (cost: 16)
                /* emit __cost2 */ 
                /* emit __update_storage_value_offset_0t_address_payable_to_t_address_payable_fn21.6a0365451892977c8542.internal.start */ (cost: 21)
                172: PUSH 0x00 
                173: SLOAD 
                174: PUSH 0x01 
                175: PUSH 0x01 
                176: PUSH 0xa0 
                177: SHL 
                178: SUB 
                179: DUP5 
                180: AND 
                181: PUSH 0x01 
                182: PUSH 0x01 
                183: PUSH 0xa0 
                184: SHL 
                185: SUB 
                186: NOT 
                187: DUP3 
                188: AND 
                189: OR 
                190: PUSH 0x00 
                191: SSTORE 
                192: POP 
                /* emit __update_storage_value_offset_0t_address_payable_to_t_address_payable_fn21.6a0365451892977c8542.internal.end */ 
                193: PUSH [tag] 18 
                194: DUP2 
                195: TIMESTAMP 
                196: PUSH [tag] 14 
                197: JUMP	// in 
                139: tag_14: 
                /* emit __checked_add_t_uint256_fn28.c3a73dc630fe2f39216c.internal.start */ (cost: 18)
                140: PUSH 0x00 
                141: DUP3 
                142: NOT 
                143: DUP3 
                144: GT 
                145: ISZERO 
                146: PUSH [tag] 16 
                147: JUMPI 
                  False Branch
                    /* emit __checked_add_t_uint256_fn28.c3a73dc630fe2f39216c.internal.panic2.start */ (cost: 0)
                    /* emit __panic_error_0x11_fn29.9dc40ce4e4ac19f76b51.internal.start */ (cost: 11)
                    148: PUSH 0x4e487b71 
                    149: PUSH 0xe0 
                    150: SHL 
                    151: PUSH 0x00 
                    152: MSTORE 
                    153: PUSH 0x11 
                    154: PUSH 0x04 
                    155: MSTORE 
                    156: PUSH 0x24 
                    157: PUSH 0x00 
                    158: REVERT 
                    /* emit __panic_error_0x11_fn29.9dc40ce4e4ac19f76b51.internal.end */ 
                    /* emit __checked_add_t_uint256_fn28.c3a73dc630fe2f39216c.internal.panic2.end */ 
                  True Branch
                    159: tag_16: 
                    160: DUP3 
                    161: DUP3 
                    162: ADD 
                    163: SWAP1 
                    164: POP 
                    165: tag_15: 
                    166: SWAP3 
                    167: SWAP2 
                    168: POP 
                    169: POP 
                    170: JUMP	// out 
                    /* emit __checked_add_t_uint256_fn28.c3a73dc630fe2f39216c.internal.end */ 
                    198: tag_18: 
                    /* emit __update_storage_value_offset_0t_uint256_to_t_uint256_fn30.b38ada4d3fc658ad220d.internal.start */ (cost: 3)
                    199: DUP1 
                    200: PUSH 0x01 
                    201: SSTORE 
                    /* emit __update_storage_value_offset_0t_uint256_to_t_uint256_fn30.b38ada4d3fc658ad220d.internal.end */ 
                    202: PUSH [tag] 19 
                    203: DUP4 
                    204: DUP3 
                    205: PUSH [tag] 14 
                    206: JUMP	// in 
                    207: tag_19: 
                    208: SWAP1 
                    209: POP 
                    /* emit __update_storage_value_offset_0t_uint256_to_t_uint256_fn30.b38ada4d3fc658ad220d.internal.start */ (cost: 4)
                    210: DUP1 
                    211: PUSH 0x02 
                    212: SSTORE 
                    213: POP 
                    /* emit __update_storage_value_offset_0t_uint256_to_t_uint256_fn30.b38ada4d3fc658ad220d.internal.end */ 
                    214: POP 
                    215: POP 
                    216: POP 
                    217: tag_17: 
                    218: JUMP	// out 
                    /* emit __constructor_BlindAuction_383_fn20.584245782238ac0f6b9a.internal.end */ 
                    101: tag_7: 
                    102: POP 
                    103: POP 
                    104: POP 
                    /* emit __deploy_code.internal.start */ (cost: 11)
                    105: PUSH [tag] 9 
                    106: PUSH [tag] 10 
                    107: JUMP	// in 
                    130: tag_10: 
                    /* emit __allocate_unbounded_fn0.5d031f41d60654945adf.internal.start */ (cost: 7)
                    131: PUSH 0x00 
                    132: PUSH 0x40 
                    133: MLOAD 
                    134: SWAP1 
                    135: POP 
                    136: tag_13: 
                    137: SWAP1 
                    138: JUMP	// out 
                    /* emit __allocate_unbounded_fn0.5d031f41d60654945adf.internal.end */ 
                    108: tag_9: 
                    109: PUSH [dataSize] sub_0 
                    110: DUP1 
                    111: PUSH [dataOffset] sub_0 
                    112: DUP4 
                    113: CODECOPY 
                    114: DUP1 
                    115: DUP3 
                    116: RETURN 
                    /* emit __deploy_code.internal.end */ 
                    /* emit __creation_code.internal.end */ 

